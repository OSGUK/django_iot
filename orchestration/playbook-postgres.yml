# This file will install postgres, virtual env, nginx, gunicorn, pip and django onto a vanilla system. It will then
# pull down from the latest software in 'master', collect static files, do an initial migration and then bring up all
# the services required.
# It requires a user who has root privillages who is not root and it would be helpfull if there is already a public key
# setup for the ssh connection too between your host computer and the destination. Befor running this you need to:
# 1) Run the setup.yml script
# To run:
# />  ansible-playbook playbook-install.yml

---
#- hosts: chh-dev
- hosts: NoisyAtomUbuntu14
  user: '{{adminuser}}'
  become: true                                                # This will tell ansible to become 'sudo' to issue commands on the machine

  vars_files:
    - vars/vagrant_variables.yml

  vars:
    ansible_ssh_user: '{{adminuser}}'                         # We need to override this to use the admin user to SSH to the machine as
                                                              # the root account will be locked via SSH by this point
    environment_path: /home/na_cms/noisy_atom_venv            # this is the virtual environment project folder
    environment_name : env_projectname
    project_root: ~/NoisyAtomPortal                           # this is the root folder where the source code is
    project_name: noisyatom
    project_repo: https://github.com/nherriot/noisy-atom-portal.git #https://github.com/nherriot/FreeFlowWines.git
    django_settings: config.settings                          # this is where we get our settings.py from
    git_branch: production


  pre_tasks:

    ##################################################
    # The simplest task - check we can ping our server
    - name: Check that the server's alive!
      action: ping
    # Update the machines before installing any software
    - name: Update machines
      apt: update_cache=yes cache_valid_time=3600

  handlers:
    # This is our re-start. Same as start but start calls up the configure after it's started
    - name: Re-starting Postgres DB Handler
      service: name={{item}} state=started enabled=yes
      with_items:
        - postgresql

    # This restarts our postgres database only once we have it installed
    - name: Starting Postgres DB
      service: name={{item}} state=started enabled=yes
      with_items:
        - postgresql
      notify:
        - Setup Postgres DB
        - Setup Postgres User can Access DB
        - Ensure Postgres user does not have unnecessary privileges

    # This set up postgres for the first time. I
    # Setup Postgres Database on the system
    - name: Setup Postgres DB Handler
      become_user: postgres
      postgresql_db: name='{{dbname}}'

    - name: Setup Postgres User can Access DB Handler
      become_user: postgres
      postgresql_user: db='{{dbname}}' name='{{dbuser}}' password='{{dbpassword}}' priv=ALL

    - name: Ensure Postgres user does not have unnecessary privileges Handler
      become_user: postgres
      postgresql_user: name='{{dbuser}}' role_attr_flags=NOSUPERUSER,NOCREATEDB


  tasks:
    # Install required software components to build our server
    - name: Install Sofware ( python-pip, python-dev, libpq-dev, postgresql, postgresql-contrib psycopg2 and nginx )
      apt: name={{item}} state=present
      notify: Starting Postgres DB
      with_items:
        - python-pip
        - python-dev
        - python-setuptools
        - python-tk
        - liblcms2-dev
        - libfreetype6-dev
        - libjpeg8-dev
        - libpq-dev
        - libtiff5-dev
        - libwebp-dev
        - postgresql
        - postgresql-contrib
        - nginx
        - python-psycopg2
        - git
        - tcl8.6-dev
        - tk8.6-dev
        - zlib1g-dev

    # This starts our postgres sql database
    - name: Starting Postgres DB
      service: name={{item}} state=started enabled=yes
      with_items:
        - postgresql

    # This set up postgres for the first time
    - name: Setup Postgres DB
      become_user: postgres
      postgresql_db: name='{{dbname}}'

    - name: Setup Postgres User can Access DB
      become_user: postgres
      postgresql_user: db='{{dbname}}' name='{{dbuser}}' password='{{dbpassword}}' priv=ALL
      postgresql_user: name='{{dbuser}}' role_attr_flags=NOSUPERUSER

