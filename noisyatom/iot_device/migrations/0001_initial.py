# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2018-01-29 22:21
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('account', '0003_auto_20170406_1056'),
    ]

    operations = [
        migrations.CreateModel(
            name='IoTMachine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_name', models.CharField(help_text='A human readable name for the device.', max_length=50)),
                ('device_id', models.CharField(help_text='The MAC address of the device e.g. a0:c5:89:61:0c:24. This value must be unique to the system', max_length=18, unique=True)),
                ('device_owner', models.EmailField(blank=True, help_text='The email of the owner. Optional field', max_length=255, null=True)),
                ('local_ip', models.GenericIPAddressField(default='0.0.0.0', help_text='The current local IP of the device')),
                ('multicast_address', models.CharField(default='raspberypi.local', help_text="This is the multicast DNS name of the device within it's local domain", max_length=255)),
                ('slug', models.SlugField(blank=True, help_text='Unique value for product page URL, created from name. Created by system on registration', null=True, unique=True)),
                ('power', models.BigIntegerField(default=0, help_text='The normal power consumption of the device when working', null=True)),
                ('device_ledger_url', models.URLField(blank=True, help_text='The URL to access the W3C Open Ledger address for this device. Optional parameter', max_length=500, null=True)),
                ('bluetooth_address', models.CharField(blank=True, help_text='The Blue Tooth address (BD_ADDR). A 48bit 6octet device identifier. Optional parameter', max_length=6, null=True)),
                ('long', models.DecimalField(decimal_places=6, default=0, help_text='The latitude of the device up to a resolution of 10cm', max_digits=8, null=True)),
                ('lat', models.DecimalField(decimal_places=6, default=0, help_text='The longitude of the device up to a resolution of 10cm', max_digits=8, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True, help_text='A description of this device. What it does. How it works. Optional parameter', null=True)),
                ('meta_keywords', models.CharField(blank=True, help_text='Comma-delimited set of SEO keywords for meta tag. Optional parameter', max_length=255, null=True, verbose_name='Meta Keywords')),
                ('meta_description', models.CharField(blank=True, help_text='Content for description of meta tag. Optional parameter', max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company_name', models.ForeignKey(blank=True, help_text='The company who own this IoT device. Optional parameter.', null=True, on_delete=django.db.models.deletion.CASCADE, to='account.Company')),
            ],
            options={
                'verbose_name_plural': 'IoT Machines',
                'db_table': 'Internet of Things Machine',
                'ordering': ['-created_at'],
            },
        ),
    ]
